#!/bin/bash
#
# SterneOS - Take a Sterne data file and input it into Sterne, 
#	  generating a model atmosphere
#
# Authors: 
#    C. Simon Jeffery (csj@arm.ac.uk) - Original csh version
#    Chris Winter (cwr@arm.ac.uk)     - Bourne sh version
#
###
# How to use this script
print_usage()
{
	echo ""
	echo "SterneOS - Usage Information"
	echo "=========================="
	echo ""
	echo "SterneOS [star_data [odf [int [model] ] ] ]"
	echo ""
}
###
# Ask user for Sterne star data file (generated by Sterne.input)
###
get_star_data()
{
   echo -n 'File containing sterne input: '
   read DATA
}
###
# Check that star_data file exists. Possibly grep the content
# to make sure the file specified has been generated by SterneOS.input
###
check_star_data()
{
	# Set to zero just in case
	DATA_ERROR=0
	# While file $DATA doesn't exist and $DATA_ERROR < 5
	while [ -z "$DATA" -a ! -r "$DATA" -a "$DATA_ERROR" -lt 5 ]
	do
		echo -n "Can't find $DATA. Please try again: "

		read DATA
		DATA_ERROR=`expr $DATA_ERROR + 1`
	done

	if [ "$DATA_ERROR" -ge 5 ]
	then
		# Something is wrong. Bail out
		echo "Number of attempts exceeded. Exiting..."
		clean_up
		exit 1
	fi

	DATA_EX=`basename $DATA` # Strip off any extension
}
###
# Ask user for the opacity distribution function(s) file
###
get_odf()
{
	echo -n "File containing ODF(s) (<CR> for continuum models): "
	read ODF
}
###
# Check if the user has specified a file that actually exists
###
check_odf()
{
	# $ODF of zero length?
	if [ -z "$ODF" ]
	then
		echo "Calculating continuum model"
	else
		# Set to zero just in case
		ODF_ERROR=0

		# While file $ODF doesn't exist and $ODF_ERROR < 5
		while [ ! -r "$ODF" -a ! -r "$GLOBAL_DATA/odf6/$ODF" -a "$ODF_ERROR" -lt 5 ]
		do
			echo -n "Can't find $ODF. Please try again: "
			read DATA
			ODF_ERROR=`expr $ODF_ERROR + 1`
		done

		if [ "$ODF_ERROR" -ge 5 ]
		then
			# Something is wrong. Bail out
			echo "Number of attempts exceeded. Exiting..."
			clean_up
			exit 1
		else
			# Check where we found the file and assign variable $DF
			DF="$GLOBAL_DATA/odf6/$ODF"

			if [ -r "$ODF" ]
			then
				DF="$ODF"
			fi
			echo "Opacity distribution function: " $DF
		fi
	fi
}
###
# As the user for the interval: BIG or LIT
###
get_interval()
{
	echo -n "BIG or LIT intervals (<CR> for default BIG): "
	read INT
}
###
# Check if user's input was valid
###
check_interval()
{
# OS grid:
	WL="grid05-500-1-900-25-5000.d"

	# Did user enter 'LIT' instead?
	if [ "$INT" = "LIT" -o "$INT" = "int" ]
	then
		WL="wavekurl.d"
	fi

}
###
# As user if they want to restart a model, and if so, what
# that model's file name is
###
get_model()
{
	echo -n "File containing start model: "
	read MODEL
}
###
# Check that the model exists
###
check_model()
{
	if [ -z "$MODEL" ]
	then
		MODEL="$DATA_EX.MODEL"
	fi

	echo "Input/output model: " "$MODEL"
	echo "$DATA_EX " > name

	# Tidy up old files
	if [ -e "$DATA_EX.output" ]
	then
		mv "$DATA_EX.output" "$DATA_EX.output%"
	fi
}
###
# Ask user to input paramters
###
get_params()
{
	get_star_data
	check_star_data
	get_odf
	check_odf
	get_interval
	check_interval
	get_model
	check_model
}
###
# Check if Sterne is actually installed, and look for
# the global data folder
###
sanity_check()
{
	# Try looking in LTECODES environment variable
	STERNE=$LTECODES/bin/sterneOS

	if [ ! -x "$STERNE" ]
	then
		# Does whereis know where Sterne is? (i.e. is sterne
		# in /usr/local/bin/sterne)
		WHEREIS=`whereis sterneOS | awk '{print $2}'`

		if [ -x "$WHEREIS" ]
		then
			STERNE="$WHEREIS"
		else
			echo "Can't find Sterne. Please set the LTECODES environment"
			echo "variable as described in the installation instructions."
			echo "Exiting..."
			exit 1
		fi
	fi

	# Now to look for the data directory
	# Set to null just incase
	GLOBAL_DATA=""

	# First, check in the default locations
	#
	# $LTECODES/share/osdata       - Environment variable
	# /usr/local/share/osdata      - The default installer location
	# /usr/local/osdata            - Possible secondary location
	# /usr/osdata                  - Possible secondary location
	# /opt/osdata                  - Possible secondary location
	# ~/                           - Check user's home directory
	# ./osdata                     - Check current directory
	# ../osdata                    - Getting desperate
	# ../../osdata                 - Very desperate
	# ./lines                      - Last chance effort - check if we're
	#                                 actually *in* osdata
	for i in \
		 $LTECODES/share/osdata \
		 /usr/local/share/osdata \
		 /usr/local/osdata \
		 /usr/osdata \
		 /opt/osdata \
		 ~/osdata \
		 ./osdata \
		 ../osdata \
		 ../../osdata \
		 ./lines \
	do
		# Is this it?
		if [ -d "$i" ]
		then
			GLOBAL_DATA="$i"

			# Ok, the last case in for loop is special
			# so check for it
			if [ "$i" = "./lines" ]
			then
				GLOBAL_DATA=./
			fi

			# We've found the location, so break out of loop
			break
		fi      
	done

	# Was our search successful?
	if [ ! -d "$GLOBAL_DATA"  ]
	then
		echo "Can't find the global data directory. Please set the LTECODES"
		echo "environment variable as described in the installation"
		echo "instructions. Exiting..."
		exit 1
	fi
}
###
# Validate the user's parameters
###
check_params()
{
	case "$#" in
		"0")
			get_params
			;;
		"1")
			DATA=$1
			;;
		"2")
			DATA=$1
			ODF=$2
			;;
		"3")
			DATA=$1
			ODF=$2
			INT=$3
			;;
		"4")
			DATA=$1
			ODF=$2
			INT=$3
			MODEL=$4.MODEL
			;;
		*)
			print_usage
			exit 1
			;;
	esac

	check_star_data
	check_odf
	check_interval
	check_model
}
setup_links()
{
	# Link for interval
	ln -fs $GLOBAL_DATA/spectrum_data/$WL WAVE

	# Link for ODF - only if not continuum
	if [ ! -z "$ODF" ]
	then
		ln -fs $DF fort.10
	fi

	# Data Links
	# First link looks for Spectrum data folder
	ln -fs $GLOBAL_DATA/opacity/op_mono  OPDATA
	ln -fs $GLOBAL_DATA/opacity/fe_op  FEDATA
	ln -fs $GLOBAL_DATA/spectrum_data/peach_tables PEACH_TABLES
	ln -fs $GLOBAL_DATA/spectrum_data/gfall_hout_toPaschen LINELIST

	# Input/Output Links
	ln -fs $MODEL MODIN

	ln -fs $DATA_EX.2 fort.2
	ln -fs $DATA_EX.3 fort.3
	ln -fs $DATA_EX.MODEL STN_MODEL
	ln -fs $DATA_EX.MOD STN_MOD
	ln -fs $DATA_EX.q STN_q
	ln -fs $DATA_EX.s STN_s
	ln -fs $DATA_EX.t STN_t
}
run_program() 
{
	echo ""
	echo "Running program..."
	echo ""

	if [ "$#" -eq "0" ] 
	then
		$STERNE <$DATA
	else
		$STERNE <$DATA >"$DATA_EX".output
	fi
}
###
# Tidy up the links
###
clean_up()
{
	rm -f PEACH_TABLES WAVE name fort.10 MODIN STN_MOD STN_MODEL fort.2 fort.3 STN_q STN_s STN_t OPDATA
}
###
# Tidy up the links then exit
###
clean_up_exit()
{
	clean_up
	exit 1
}
###
# Main program
###
#  Tidy-up mode - Backwards compatibility feature
if [ "$1" == "clean" ]
then
	clean_up
	exit 0
fi

# Catch any Ctl^C interrupts
trap clean_up_exit 2

### Variables
DATA=""	 # star_data filename
DATA_EX=""      # star_data filename minus any extension (Used to create output files, etc)
DATA_ERROR=0    # Error counter - reading star_data filename

INT=""	  # Interval
WL=""	   # Full path to interval data		    !!!!! FIX ME !!!!! (This right?)

ODF=""	  # File containing opacity distribution function
DF=""	   # Full path to ODF file
ODF_ERROR=0     # Error counter when reading in ODF filename

MODEL=""	# File containing model to restart from

STERNE=""       # Path to Sterne executable
STERNE_ERROR=0  # Error counter when asking Sterne location

GLOBAL_DATA=""  # Where the data files are installed
GD_ERROR=0      # Error counter when asking for osdata

sanity_check    # Is the environment brain damaged?

check_params $@
setup_links
run_program $@
clean_up

exit 0
